syntax = "proto3";

package atomix.set;

import "protocol.proto";
import "headers.proto";
import "google/protobuf/duration.proto";

option java_package = "io.atomix.grpc.set";
option java_multiple_files = true;

// Set ID
message SetId {
    string name = 1;
    oneof proto {
        protocol.MultiRaftProtocol raft = 2;
        protocol.MultiPrimaryProtocol multi_primary = 3;
        protocol.DistributedLogProtocol log = 4;
    }
}

message CreateRequest {
    SetId id = 1;
    google.protobuf.Duration timeout = 2;
}

message CreateResponse {
    atomix.headers.SessionHeaders headers = 1;
}

message KeepAliveRequest {
    SetId id = 1;
    atomix.headers.SessionHeaders headers = 2;
}

message KeepAliveResponse {
    atomix.headers.SessionHeaders headers = 1;
}

message CloseRequest {
    SetId id = 1;
    atomix.headers.SessionHeaders headers = 2;
}

message CloseResponse {

}

message SizeRequest {
    SetId id = 1;
    atomix.headers.SessionQueryHeaders headers = 2;
}

message SizeResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    int32 size = 2;
}

message ContainsRequest {
    SetId id = 1;
    atomix.headers.SessionQueryHeaders headers = 2;
    repeated string values = 3;
}

message ContainsResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    bool contains = 2;
}

message AddRequest {
    SetId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
    repeated string values = 3;
}

message AddResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    ResponseStatus status = 2;
    bool added = 3;
}

message RemoveRequest {
    SetId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
    repeated string values = 3;
}

message RemoveResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    ResponseStatus status = 2;
    bool removed = 3;
}

message ClearRequest {
    SetId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
}

message ClearResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
}

message EventRequest {
    SetId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
}

message EventResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    Type type = 2;
    string value = 3;

    enum Type {
        ADDED = 0;
        REMOVED = 1;
    }
}

message IterateRequest {
    SetId id = 1;
    atomix.headers.SessionQueryHeaders headers = 2;
}

message IterateResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    string value = 2;
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
}

// Set service
service SetService {

    rpc Create(CreateRequest) returns (CreateResponse) {}

    rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse) {}

    rpc Close(CloseRequest) returns (CloseResponse) {}

    rpc Size(SizeRequest) returns (SizeResponse) {}

    rpc Contains(ContainsRequest) returns (ContainsResponse) {}

    rpc Add(AddRequest) returns (AddResponse) {}

    rpc Remove(RemoveRequest) returns (RemoveResponse) {}

    rpc Clear(ClearRequest) returns (ClearResponse) {}

    rpc Listen(EventRequest) returns (stream EventResponse) {}

    rpc Iterate(IterateRequest) returns (stream IterateResponse) {}
}
