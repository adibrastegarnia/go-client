syntax = "proto3";

package atomix.map;

import "protocol/protocol.proto";
import "headers/headers.proto";
import "google/protobuf/duration.proto";

option java_package = "io.atomix.grpc._map";
option java_multiple_files = true;

// Basic _map request
message MapId {
    string name = 1;
    oneof proto {
        protocol.MultiRaftProtocol raft = 2;
        protocol.MultiPrimaryProtocol multi_primary = 3;
        protocol.DistributedLogProtocol log = 4;
    }
}

message CreateRequest {
    MapId id = 1;
    google.protobuf.Duration timeout = 2;
}

message CreateResponse {
    atomix.headers.SessionHeaders headers = 1;
}

message KeepAliveRequest {
    MapId id = 1;
    atomix.headers.SessionHeaders headers = 2;
}

message KeepAliveResponse {
    atomix.headers.SessionHeaders headers = 1;
}

message CloseRequest {
    MapId id = 1;
    atomix.headers.SessionHeaders headers = 2;
}

message CloseResponse {

}

message ExistsRequest {
    MapId id = 1;
    atomix.headers.SessionQueryHeaders headers = 2;
    repeated string keys = 3;
}

message ExistsResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    bool contains_key = 2;
}

message SizeRequest {
    MapId id = 1;
    atomix.headers.SessionQueryHeaders headers = 2;
}

message SizeResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    int32 size = 2;
}

message PutRequest {
    MapId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
    string key = 3;
    bytes value = 4;
    int64 version = 5;
    int64 ttl = 6;
}

message PutResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    ResponseStatus status = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
}

message ReplaceRequest {
    MapId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
    string key = 3;
    bytes previous_value = 4;
    int64 previous_version = 5;
    bytes new_value = 6;
    int64 ttl = 7;
}

message ReplaceResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    ResponseStatus status = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
}

message GetRequest {
    MapId id = 1;
    atomix.headers.SessionQueryHeaders headers = 2;
    string key = 3;
}

message GetResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    bytes value = 2;
    int64 version = 3;
}

message RemoveRequest {
    MapId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
    string key = 3;
    bytes value = 4;
    int64 version = 5;
}

message RemoveResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    ResponseStatus status = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
}

message ClearRequest {
    MapId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
}

message ClearResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
}

message EventRequest {
    MapId id = 1;
    atomix.headers.SessionCommandHeaders headers = 2;
}

message EventResponse {
    atomix.headers.SessionResponseHeaders headers = 1;
    Type type = 2;
    string key = 3;
    bytes old_value = 4;
    int64 old_version = 5;
    bytes new_value = 6;
    int64 new_version = 7;

    enum Type {
        INSERTED = 0;
        UPDATED = 1;
        REMOVED = 2;
    }
}

enum ResponseStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}

// Map service
service MapService {

    rpc Create (CreateRequest) returns (CreateResponse) {}

    rpc KeepAlive (KeepAliveRequest) returns (KeepAliveResponse) {}

    rpc Close (CloseRequest) returns (CloseResponse) {}

    rpc Size (SizeRequest) returns (SizeResponse) {}

    rpc Exists (ExistsRequest) returns (ExistsResponse) {}

    rpc Put (PutRequest) returns (PutResponse) {}

    rpc Replace (ReplaceRequest) returns (ReplaceResponse) {}

    rpc Get (GetRequest) returns (GetResponse) {}

    rpc Remove (RemoveRequest) returns (RemoveResponse) {}

    rpc Clear (ClearRequest) returns (ClearResponse) {}

    rpc Events (EventRequest) returns (stream EventResponse) {}

}
