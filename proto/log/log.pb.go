// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log/log.proto

package log

import (
	context "context"
	fmt "fmt"
	protocol "github.com/atomix/atomix-go/proto/protocol"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Distributed log ID
type LogId struct {
	// Types that are valid to be assigned to Proto:
	//	*LogId_Log
	Proto                isLogId_Proto `protobuf_oneof:"proto"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *LogId) Reset()         { *m = LogId{} }
func (m *LogId) String() string { return proto.CompactTextString(m) }
func (*LogId) ProtoMessage()    {}
func (*LogId) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0d72543c57a28, []int{0}
}

func (m *LogId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogId.Unmarshal(m, b)
}
func (m *LogId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogId.Marshal(b, m, deterministic)
}
func (m *LogId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogId.Merge(m, src)
}
func (m *LogId) XXX_Size() int {
	return xxx_messageInfo_LogId.Size(m)
}
func (m *LogId) XXX_DiscardUnknown() {
	xxx_messageInfo_LogId.DiscardUnknown(m)
}

var xxx_messageInfo_LogId proto.InternalMessageInfo

type isLogId_Proto interface {
	isLogId_Proto()
}

type LogId_Log struct {
	Log *protocol.DistributedLogProtocol `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

func (*LogId_Log) isLogId_Proto() {}

func (m *LogId) GetProto() isLogId_Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *LogId) GetLog() *protocol.DistributedLogProtocol {
	if x, ok := m.GetProto().(*LogId_Log); ok {
		return x.Log
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LogId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LogId_Log)(nil),
	}
}

type ProduceRequest struct {
	Id                   *LogId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partition            int32    `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceRequest) Reset()         { *m = ProduceRequest{} }
func (m *ProduceRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceRequest) ProtoMessage()    {}
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0d72543c57a28, []int{1}
}

func (m *ProduceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceRequest.Unmarshal(m, b)
}
func (m *ProduceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceRequest.Marshal(b, m, deterministic)
}
func (m *ProduceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceRequest.Merge(m, src)
}
func (m *ProduceRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceRequest.Size(m)
}
func (m *ProduceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceRequest proto.InternalMessageInfo

func (m *ProduceRequest) GetId() *LogId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ProduceRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *ProduceRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ProduceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceResponse) Reset()         { *m = ProduceResponse{} }
func (m *ProduceResponse) String() string { return proto.CompactTextString(m) }
func (*ProduceResponse) ProtoMessage()    {}
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0d72543c57a28, []int{2}
}

func (m *ProduceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceResponse.Unmarshal(m, b)
}
func (m *ProduceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceResponse.Marshal(b, m, deterministic)
}
func (m *ProduceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceResponse.Merge(m, src)
}
func (m *ProduceResponse) XXX_Size() int {
	return xxx_messageInfo_ProduceResponse.Size(m)
}
func (m *ProduceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceResponse proto.InternalMessageInfo

type ConsumeRequest struct {
	Id                   *LogId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Partition            int32    `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeRequest) Reset()         { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()    {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0d72543c57a28, []int{3}
}

func (m *ConsumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeRequest.Unmarshal(m, b)
}
func (m *ConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeRequest.Merge(m, src)
}
func (m *ConsumeRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeRequest.Size(m)
}
func (m *ConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeRequest proto.InternalMessageInfo

func (m *ConsumeRequest) GetId() *LogId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ConsumeRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

type LogRecord struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_41e0d72543c57a28, []int{4}
}

func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRecord.Unmarshal(m, b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return xxx_messageInfo_LogRecord.Size(m)
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *LogRecord) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LogRecord) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*LogId)(nil), "atomix.log.LogId")
	proto.RegisterType((*ProduceRequest)(nil), "atomix.log.ProduceRequest")
	proto.RegisterType((*ProduceResponse)(nil), "atomix.log.ProduceResponse")
	proto.RegisterType((*ConsumeRequest)(nil), "atomix.log.ConsumeRequest")
	proto.RegisterType((*LogRecord)(nil), "atomix.log.LogRecord")
}

func init() { proto.RegisterFile("log/log.proto", fileDescriptor_41e0d72543c57a28) }

var fileDescriptor_41e0d72543c57a28 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0x86, 0x59, 0xa0, 0x10, 0xe6, 0xfb, 0xc4, 0xb0, 0x51, 0x24, 0xd5, 0x03, 0xf6, 0x62, 0x4f,
	0xc5, 0xe0, 0xd1, 0x8b, 0x41, 0x63, 0x34, 0xa9, 0x09, 0xae, 0x07, 0xcf, 0xa5, 0x5d, 0x36, 0x9b,
	0xb4, 0x4c, 0xdd, 0xdd, 0x12, 0x7f, 0x89, 0xbf, 0xd7, 0xd0, 0x2e, 0x60, 0x0d, 0x47, 0x6f, 0x3b,
	0xef, 0xcc, 0x3c, 0x33, 0xf3, 0x2e, 0x1c, 0xa5, 0x28, 0x26, 0x29, 0x8a, 0x20, 0x57, 0x68, 0x90,
	0x42, 0x64, 0x30, 0x93, 0x9f, 0x41, 0x8a, 0xc2, 0x3d, 0x2b, 0xa5, 0x18, 0xd3, 0xc9, 0xf6, 0x51,
	0x15, 0x79, 0x2f, 0xe0, 0x84, 0x28, 0x9e, 0x13, 0x7a, 0x0b, 0xad, 0x14, 0xc5, 0x88, 0x8c, 0x89,
	0xff, 0x6f, 0x7a, 0x15, 0xd8, 0xde, 0x5d, 0xf5, 0x83, 0xd4, 0x46, 0xc9, 0x45, 0x61, 0x78, 0x12,
	0xa2, 0x98, 0x5b, 0xf9, 0xa9, 0xc1, 0x36, 0x5d, 0xb3, 0x2e, 0x38, 0x15, 0x4e, 0x40, 0x7f, 0xae,
	0x30, 0x29, 0x62, 0xce, 0xf8, 0x47, 0xc1, 0xb5, 0xa1, 0x97, 0xd0, 0x94, 0x89, 0xc5, 0x0e, 0x82,
	0xfd, 0x4a, 0x41, 0x39, 0x96, 0x35, 0x65, 0x42, 0x2f, 0xa0, 0x97, 0x47, 0xca, 0x48, 0x23, 0x71,
	0x35, 0x6a, 0x8e, 0x89, 0xef, 0xb0, 0xbd, 0x40, 0x4f, 0xc0, 0x59, 0x47, 0x69, 0xc1, 0x47, 0xad,
	0x31, 0xf1, 0xff, 0xb3, 0x2a, 0xf0, 0x06, 0x70, 0xbc, 0x1b, 0xa4, 0x73, 0x5c, 0x69, 0xee, 0xbd,
	0x42, 0xff, 0x1e, 0x57, 0xba, 0xc8, 0xfe, 0x6c, 0xb6, 0xf7, 0x0e, 0xbd, 0x10, 0x05, 0xe3, 0x31,
	0xaa, 0x84, 0x0e, 0xa1, 0x83, 0xcb, 0xa5, 0xe6, 0xa6, 0x24, 0xb6, 0x99, 0x8d, 0x36, 0x08, 0x23,
	0x33, 0xae, 0x4d, 0x94, 0xe5, 0x25, 0xa2, 0xcd, 0xf6, 0xc2, 0xe1, 0xf5, 0xa7, 0x5f, 0x04, 0x20,
	0x44, 0xf1, 0xc6, 0xd5, 0x5a, 0xc6, 0x9c, 0x3e, 0x42, 0xd7, 0x5e, 0x43, 0xdd, 0x9f, 0x7b, 0xd6,
	0xbd, 0x74, 0xcf, 0x0f, 0xe6, 0xec, 0xf9, 0x0d, 0x9f, 0xd0, 0x3b, 0xe8, 0x5a, 0x0b, 0xea, 0x9c,
	0xba, 0x2f, 0xee, 0xe9, 0x2f, 0x2f, 0xaa, 0x03, 0xbd, 0xc6, 0x35, 0x99, 0x0d, 0x81, 0x4a, 0xdc,
	0xa6, 0x85, 0xca, 0xe3, 0x4d, 0xcd, 0x9c, 0x2c, 0x3a, 0xe5, 0xff, 0xde, 0x7c, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xc6, 0x75, 0xd0, 0xe3, 0x64, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	Produce(ctx context.Context, opts ...grpc.CallOption) (LogService_ProduceClient, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (LogService_ConsumeClient, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Produce(ctx context.Context, opts ...grpc.CallOption) (LogService_ProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/atomix.log.LogService/Produce", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceProduceClient{stream}
	return x, nil
}

type LogService_ProduceClient interface {
	Send(*ProduceRequest) error
	CloseAndRecv() (*ProduceResponse, error)
	grpc.ClientStream
}

type logServiceProduceClient struct {
	grpc.ClientStream
}

func (x *logServiceProduceClient) Send(m *ProduceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceProduceClient) CloseAndRecv() (*ProduceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProduceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (LogService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[1], "/atomix.log.LogService/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_ConsumeClient interface {
	Recv() (*LogRecord, error)
	grpc.ClientStream
}

type logServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *logServiceConsumeClient) Recv() (*LogRecord, error) {
	m := new(LogRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	Produce(LogService_ProduceServer) error
	Consume(*ConsumeRequest, LogService_ConsumeServer) error
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) Produce(srv LogService_ProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (*UnimplementedLogServiceServer) Consume(req *ConsumeRequest, srv LogService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_Produce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Produce(&logServiceProduceServer{stream})
}

type LogService_ProduceServer interface {
	SendAndClose(*ProduceResponse) error
	Recv() (*ProduceRequest, error)
	grpc.ServerStream
}

type logServiceProduceServer struct {
	grpc.ServerStream
}

func (x *logServiceProduceServer) SendAndClose(m *ProduceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceProduceServer) Recv() (*ProduceRequest, error) {
	m := new(ProduceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).Consume(m, &logServiceConsumeServer{stream})
}

type LogService_ConsumeServer interface {
	Send(*LogRecord) error
	grpc.ServerStream
}

type logServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *logServiceConsumeServer) Send(m *LogRecord) error {
	return x.ServerStream.SendMsg(m)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.log.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Produce",
			Handler:       _LogService_Produce_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Consume",
			Handler:       _LogService_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log/log.proto",
}
