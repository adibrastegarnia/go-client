// Code generated by protoc-gen-go. DO NOT EDIT.
// source: map.proto

package atomix_map

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResponseStatus int32

const (
	ResponseStatus_OK                  ResponseStatus = 0
	ResponseStatus_NOOP                ResponseStatus = 1
	ResponseStatus_WRITE_LOCK          ResponseStatus = 2
	ResponseStatus_PRECONDITION_FAILED ResponseStatus = 3
)

var ResponseStatus_name = map[int32]string{
	0: "OK",
	1: "NOOP",
	2: "WRITE_LOCK",
	3: "PRECONDITION_FAILED",
}

var ResponseStatus_value = map[string]int32{
	"OK":                  0,
	"NOOP":                1,
	"WRITE_LOCK":          2,
	"PRECONDITION_FAILED": 3,
}

func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}

func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{0}
}

type EventResponse_Type int32

const (
	EventResponse_INSERTED EventResponse_Type = 0
	EventResponse_UPDATED  EventResponse_Type = 1
	EventResponse_REMOVED  EventResponse_Type = 2
)

var EventResponse_Type_name = map[int32]string{
	0: "INSERTED",
	1: "UPDATED",
	2: "REMOVED",
}

var EventResponse_Type_value = map[string]int32{
	"INSERTED": 0,
	"UPDATED":  1,
	"REMOVED":  2,
}

func (x EventResponse_Type) String() string {
	return proto.EnumName(EventResponse_Type_name, int32(x))
}

func (EventResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{22, 0}
}

// Basic map request
type MapId struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Proto:
	//	*MapId_Raft
	//	*MapId_MultiPrimary
	//	*MapId_Log
	Proto                isMapId_Proto `protobuf_oneof:"proto"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MapId) Reset()         { *m = MapId{} }
func (m *MapId) String() string { return proto.CompactTextString(m) }
func (*MapId) ProtoMessage()    {}
func (*MapId) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{0}
}

func (m *MapId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapId.Unmarshal(m, b)
}
func (m *MapId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapId.Marshal(b, m, deterministic)
}
func (m *MapId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapId.Merge(m, src)
}
func (m *MapId) XXX_Size() int {
	return xxx_messageInfo_MapId.Size(m)
}
func (m *MapId) XXX_DiscardUnknown() {
	xxx_messageInfo_MapId.DiscardUnknown(m)
}

var xxx_messageInfo_MapId proto.InternalMessageInfo

func (m *MapId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isMapId_Proto interface {
	isMapId_Proto()
}

type MapId_Raft struct {
	Raft *MultiRaftProtocol `protobuf:"bytes,2,opt,name=raft,proto3,oneof"`
}

type MapId_MultiPrimary struct {
	MultiPrimary *MultiPrimaryProtocol `protobuf:"bytes,3,opt,name=multi_primary,json=multiPrimary,proto3,oneof"`
}

type MapId_Log struct {
	Log *DistributedLogProtocol `protobuf:"bytes,4,opt,name=log,proto3,oneof"`
}

func (*MapId_Raft) isMapId_Proto() {}

func (*MapId_MultiPrimary) isMapId_Proto() {}

func (*MapId_Log) isMapId_Proto() {}

func (m *MapId) GetProto() isMapId_Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *MapId) GetRaft() *MultiRaftProtocol {
	if x, ok := m.GetProto().(*MapId_Raft); ok {
		return x.Raft
	}
	return nil
}

func (m *MapId) GetMultiPrimary() *MultiPrimaryProtocol {
	if x, ok := m.GetProto().(*MapId_MultiPrimary); ok {
		return x.MultiPrimary
	}
	return nil
}

func (m *MapId) GetLog() *DistributedLogProtocol {
	if x, ok := m.GetProto().(*MapId_Log); ok {
		return x.Log
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MapId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MapId_Raft)(nil),
		(*MapId_MultiPrimary)(nil),
		(*MapId_Log)(nil),
	}
}

type CreateRequest struct {
	Id                   *MapId             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout              *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{1}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CreateRequest) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

type CreateResponse struct {
	Headers              *SessionHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{2}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type KeepAliveRequest struct {
	Id                   *MapId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KeepAliveRequest) Reset()         { *m = KeepAliveRequest{} }
func (m *KeepAliveRequest) String() string { return proto.CompactTextString(m) }
func (*KeepAliveRequest) ProtoMessage()    {}
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{3}
}

func (m *KeepAliveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveRequest.Unmarshal(m, b)
}
func (m *KeepAliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveRequest.Marshal(b, m, deterministic)
}
func (m *KeepAliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveRequest.Merge(m, src)
}
func (m *KeepAliveRequest) XXX_Size() int {
	return xxx_messageInfo_KeepAliveRequest.Size(m)
}
func (m *KeepAliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveRequest proto.InternalMessageInfo

func (m *KeepAliveRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *KeepAliveRequest) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type KeepAliveResponse struct {
	Headers              *SessionHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KeepAliveResponse) Reset()         { *m = KeepAliveResponse{} }
func (m *KeepAliveResponse) String() string { return proto.CompactTextString(m) }
func (*KeepAliveResponse) ProtoMessage()    {}
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{4}
}

func (m *KeepAliveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveResponse.Unmarshal(m, b)
}
func (m *KeepAliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveResponse.Marshal(b, m, deterministic)
}
func (m *KeepAliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveResponse.Merge(m, src)
}
func (m *KeepAliveResponse) XXX_Size() int {
	return xxx_messageInfo_KeepAliveResponse.Size(m)
}
func (m *KeepAliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveResponse proto.InternalMessageInfo

func (m *KeepAliveResponse) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type CloseRequest struct {
	Id                   *MapId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CloseRequest) Reset()         { *m = CloseRequest{} }
func (m *CloseRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()    {}
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{5}
}

func (m *CloseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRequest.Unmarshal(m, b)
}
func (m *CloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRequest.Marshal(b, m, deterministic)
}
func (m *CloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRequest.Merge(m, src)
}
func (m *CloseRequest) XXX_Size() int {
	return xxx_messageInfo_CloseRequest.Size(m)
}
func (m *CloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRequest proto.InternalMessageInfo

func (m *CloseRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CloseRequest) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type CloseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseResponse) Reset()         { *m = CloseResponse{} }
func (m *CloseResponse) String() string { return proto.CompactTextString(m) }
func (*CloseResponse) ProtoMessage()    {}
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{6}
}

func (m *CloseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseResponse.Unmarshal(m, b)
}
func (m *CloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseResponse.Marshal(b, m, deterministic)
}
func (m *CloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseResponse.Merge(m, src)
}
func (m *CloseResponse) XXX_Size() int {
	return xxx_messageInfo_CloseResponse.Size(m)
}
func (m *CloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseResponse proto.InternalMessageInfo

type ExistsRequest struct {
	Id                   *MapId               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionQueryHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Keys                 []string             `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ExistsRequest) Reset()         { *m = ExistsRequest{} }
func (m *ExistsRequest) String() string { return proto.CompactTextString(m) }
func (*ExistsRequest) ProtoMessage()    {}
func (*ExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{7}
}

func (m *ExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistsRequest.Unmarshal(m, b)
}
func (m *ExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistsRequest.Marshal(b, m, deterministic)
}
func (m *ExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsRequest.Merge(m, src)
}
func (m *ExistsRequest) XXX_Size() int {
	return xxx_messageInfo_ExistsRequest.Size(m)
}
func (m *ExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsRequest proto.InternalMessageInfo

func (m *ExistsRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ExistsRequest) GetHeaders() *SessionQueryHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ExistsRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ExistsResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	ContainsKey          bool                    `protobuf:"varint,2,opt,name=contains_key,json=containsKey,proto3" json:"contains_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ExistsResponse) Reset()         { *m = ExistsResponse{} }
func (m *ExistsResponse) String() string { return proto.CompactTextString(m) }
func (*ExistsResponse) ProtoMessage()    {}
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{8}
}

func (m *ExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistsResponse.Unmarshal(m, b)
}
func (m *ExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistsResponse.Marshal(b, m, deterministic)
}
func (m *ExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsResponse.Merge(m, src)
}
func (m *ExistsResponse) XXX_Size() int {
	return xxx_messageInfo_ExistsResponse.Size(m)
}
func (m *ExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsResponse proto.InternalMessageInfo

func (m *ExistsResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ExistsResponse) GetContainsKey() bool {
	if m != nil {
		return m.ContainsKey
	}
	return false
}

type SizeRequest struct {
	Id                   *MapId               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionQueryHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SizeRequest) Reset()         { *m = SizeRequest{} }
func (m *SizeRequest) String() string { return proto.CompactTextString(m) }
func (*SizeRequest) ProtoMessage()    {}
func (*SizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{9}
}

func (m *SizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SizeRequest.Unmarshal(m, b)
}
func (m *SizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SizeRequest.Marshal(b, m, deterministic)
}
func (m *SizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SizeRequest.Merge(m, src)
}
func (m *SizeRequest) XXX_Size() int {
	return xxx_messageInfo_SizeRequest.Size(m)
}
func (m *SizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SizeRequest proto.InternalMessageInfo

func (m *SizeRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SizeRequest) GetHeaders() *SessionQueryHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type SizeResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Size                 int32                   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SizeResponse) Reset()         { *m = SizeResponse{} }
func (m *SizeResponse) String() string { return proto.CompactTextString(m) }
func (*SizeResponse) ProtoMessage()    {}
func (*SizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{10}
}

func (m *SizeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SizeResponse.Unmarshal(m, b)
}
func (m *SizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SizeResponse.Marshal(b, m, deterministic)
}
func (m *SizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SizeResponse.Merge(m, src)
}
func (m *SizeResponse) XXX_Size() int {
	return xxx_messageInfo_SizeResponse.Size(m)
}
func (m *SizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SizeResponse proto.InternalMessageInfo

func (m *SizeResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *SizeResponse) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PutRequest struct {
	Id                   *MapId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Key                  string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Version              int64                  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Ttl                  int64                  `protobuf:"varint,6,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}
func (*PutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{11}
}

func (m *PutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutRequest.Unmarshal(m, b)
}
func (m *PutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutRequest.Marshal(b, m, deterministic)
}
func (m *PutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutRequest.Merge(m, src)
}
func (m *PutRequest) XXX_Size() int {
	return xxx_messageInfo_PutRequest.Size(m)
}
func (m *PutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutRequest proto.InternalMessageInfo

func (m *PutRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PutRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *PutRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PutRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PutRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PutRequest) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type PutResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Status               ResponseStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=atomix.map.ResponseStatus" json:"status,omitempty"`
	PreviousValue        []byte                  `protobuf:"bytes,3,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	PreviousVersion      int64                   `protobuf:"varint,4,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}
func (*PutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{12}
}

func (m *PutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PutResponse.Unmarshal(m, b)
}
func (m *PutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PutResponse.Marshal(b, m, deterministic)
}
func (m *PutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutResponse.Merge(m, src)
}
func (m *PutResponse) XXX_Size() int {
	return xxx_messageInfo_PutResponse.Size(m)
}
func (m *PutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutResponse proto.InternalMessageInfo

func (m *PutResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *PutResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *PutResponse) GetPreviousValue() []byte {
	if m != nil {
		return m.PreviousValue
	}
	return nil
}

func (m *PutResponse) GetPreviousVersion() int64 {
	if m != nil {
		return m.PreviousVersion
	}
	return 0
}

type ReplaceRequest struct {
	Id                   *MapId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Key                  string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	PreviousValue        []byte                 `protobuf:"bytes,4,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	PreviousVersion      int64                  `protobuf:"varint,5,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	NewValue             []byte                 `protobuf:"bytes,6,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	Ttl                  int64                  `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReplaceRequest) Reset()         { *m = ReplaceRequest{} }
func (m *ReplaceRequest) String() string { return proto.CompactTextString(m) }
func (*ReplaceRequest) ProtoMessage()    {}
func (*ReplaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{13}
}

func (m *ReplaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceRequest.Unmarshal(m, b)
}
func (m *ReplaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceRequest.Marshal(b, m, deterministic)
}
func (m *ReplaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceRequest.Merge(m, src)
}
func (m *ReplaceRequest) XXX_Size() int {
	return xxx_messageInfo_ReplaceRequest.Size(m)
}
func (m *ReplaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceRequest proto.InternalMessageInfo

func (m *ReplaceRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReplaceRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ReplaceRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReplaceRequest) GetPreviousValue() []byte {
	if m != nil {
		return m.PreviousValue
	}
	return nil
}

func (m *ReplaceRequest) GetPreviousVersion() int64 {
	if m != nil {
		return m.PreviousVersion
	}
	return 0
}

func (m *ReplaceRequest) GetNewValue() []byte {
	if m != nil {
		return m.NewValue
	}
	return nil
}

func (m *ReplaceRequest) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type ReplaceResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Status               ResponseStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=atomix.map.ResponseStatus" json:"status,omitempty"`
	PreviousValue        []byte                  `protobuf:"bytes,3,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	PreviousVersion      int64                   `protobuf:"varint,4,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReplaceResponse) Reset()         { *m = ReplaceResponse{} }
func (m *ReplaceResponse) String() string { return proto.CompactTextString(m) }
func (*ReplaceResponse) ProtoMessage()    {}
func (*ReplaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{14}
}

func (m *ReplaceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplaceResponse.Unmarshal(m, b)
}
func (m *ReplaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplaceResponse.Marshal(b, m, deterministic)
}
func (m *ReplaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceResponse.Merge(m, src)
}
func (m *ReplaceResponse) XXX_Size() int {
	return xxx_messageInfo_ReplaceResponse.Size(m)
}
func (m *ReplaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceResponse proto.InternalMessageInfo

func (m *ReplaceResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ReplaceResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *ReplaceResponse) GetPreviousValue() []byte {
	if m != nil {
		return m.PreviousValue
	}
	return nil
}

func (m *ReplaceResponse) GetPreviousVersion() int64 {
	if m != nil {
		return m.PreviousVersion
	}
	return 0
}

type GetRequest struct {
	Id                   *MapId               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionQueryHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Key                  string               `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{15}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetRequest) GetHeaders() *SessionQueryHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GetRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Value                []byte                  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Version              int64                   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}
func (*GetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{16}
}

func (m *GetResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResponse.Unmarshal(m, b)
}
func (m *GetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResponse.Marshal(b, m, deterministic)
}
func (m *GetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponse.Merge(m, src)
}
func (m *GetResponse) XXX_Size() int {
	return xxx_messageInfo_GetResponse.Size(m)
}
func (m *GetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponse proto.InternalMessageInfo

func (m *GetResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GetResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GetResponse) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RemoveRequest struct {
	Id                   *MapId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Key                  string                 `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Version              int64                  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RemoveRequest) Reset()         { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()    {}
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{17}
}

func (m *RemoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveRequest.Unmarshal(m, b)
}
func (m *RemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveRequest.Marshal(b, m, deterministic)
}
func (m *RemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRequest.Merge(m, src)
}
func (m *RemoveRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveRequest.Size(m)
}
func (m *RemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRequest proto.InternalMessageInfo

func (m *RemoveRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RemoveRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RemoveRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RemoveRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RemoveRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type RemoveResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Status               ResponseStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=atomix.map.ResponseStatus" json:"status,omitempty"`
	PreviousValue        []byte                  `protobuf:"bytes,3,opt,name=previous_value,json=previousValue,proto3" json:"previous_value,omitempty"`
	PreviousVersion      int64                   `protobuf:"varint,4,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RemoveResponse) Reset()         { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()    {}
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{18}
}

func (m *RemoveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveResponse.Unmarshal(m, b)
}
func (m *RemoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveResponse.Marshal(b, m, deterministic)
}
func (m *RemoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveResponse.Merge(m, src)
}
func (m *RemoveResponse) XXX_Size() int {
	return xxx_messageInfo_RemoveResponse.Size(m)
}
func (m *RemoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveResponse proto.InternalMessageInfo

func (m *RemoveResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RemoveResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_OK
}

func (m *RemoveResponse) GetPreviousValue() []byte {
	if m != nil {
		return m.PreviousValue
	}
	return nil
}

func (m *RemoveResponse) GetPreviousVersion() int64 {
	if m != nil {
		return m.PreviousVersion
	}
	return 0
}

type ClearRequest struct {
	Id                   *MapId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ClearRequest) Reset()         { *m = ClearRequest{} }
func (m *ClearRequest) String() string { return proto.CompactTextString(m) }
func (*ClearRequest) ProtoMessage()    {}
func (*ClearRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{19}
}

func (m *ClearRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearRequest.Unmarshal(m, b)
}
func (m *ClearRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearRequest.Marshal(b, m, deterministic)
}
func (m *ClearRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearRequest.Merge(m, src)
}
func (m *ClearRequest) XXX_Size() int {
	return xxx_messageInfo_ClearRequest.Size(m)
}
func (m *ClearRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClearRequest proto.InternalMessageInfo

func (m *ClearRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ClearRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type ClearResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ClearResponse) Reset()         { *m = ClearResponse{} }
func (m *ClearResponse) String() string { return proto.CompactTextString(m) }
func (*ClearResponse) ProtoMessage()    {}
func (*ClearResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{20}
}

func (m *ClearResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearResponse.Unmarshal(m, b)
}
func (m *ClearResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearResponse.Marshal(b, m, deterministic)
}
func (m *ClearResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearResponse.Merge(m, src)
}
func (m *ClearResponse) XXX_Size() int {
	return xxx_messageInfo_ClearResponse.Size(m)
}
func (m *ClearResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearResponse proto.InternalMessageInfo

func (m *ClearResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type EventRequest struct {
	Id                   *MapId                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{21}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetId() *MapId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EventRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type EventResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Type                 EventResponse_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=atomix.map.EventResponse_Type" json:"type,omitempty"`
	Key                  string                  `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	OldValue             []byte                  `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	OldVersion           int64                   `protobuf:"varint,5,opt,name=old_version,json=oldVersion,proto3" json:"old_version,omitempty"`
	NewValue             []byte                  `protobuf:"bytes,6,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	NewVersion           int64                   `protobuf:"varint,7,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EventResponse) Reset()         { *m = EventResponse{} }
func (m *EventResponse) String() string { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()    {}
func (*EventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_670a3ee274ba020a, []int{22}
}

func (m *EventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventResponse.Unmarshal(m, b)
}
func (m *EventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventResponse.Marshal(b, m, deterministic)
}
func (m *EventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponse.Merge(m, src)
}
func (m *EventResponse) XXX_Size() int {
	return xxx_messageInfo_EventResponse.Size(m)
}
func (m *EventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponse proto.InternalMessageInfo

func (m *EventResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *EventResponse) GetType() EventResponse_Type {
	if m != nil {
		return m.Type
	}
	return EventResponse_INSERTED
}

func (m *EventResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EventResponse) GetOldValue() []byte {
	if m != nil {
		return m.OldValue
	}
	return nil
}

func (m *EventResponse) GetOldVersion() int64 {
	if m != nil {
		return m.OldVersion
	}
	return 0
}

func (m *EventResponse) GetNewValue() []byte {
	if m != nil {
		return m.NewValue
	}
	return nil
}

func (m *EventResponse) GetNewVersion() int64 {
	if m != nil {
		return m.NewVersion
	}
	return 0
}

func init() {
	proto.RegisterEnum("atomix.map.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
	proto.RegisterEnum("atomix.map.EventResponse_Type", EventResponse_Type_name, EventResponse_Type_value)
	proto.RegisterType((*MapId)(nil), "atomix.map.MapId")
	proto.RegisterType((*CreateRequest)(nil), "atomix.map.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "atomix.map.CreateResponse")
	proto.RegisterType((*KeepAliveRequest)(nil), "atomix.map.KeepAliveRequest")
	proto.RegisterType((*KeepAliveResponse)(nil), "atomix.map.KeepAliveResponse")
	proto.RegisterType((*CloseRequest)(nil), "atomix.map.CloseRequest")
	proto.RegisterType((*CloseResponse)(nil), "atomix.map.CloseResponse")
	proto.RegisterType((*ExistsRequest)(nil), "atomix.map.ExistsRequest")
	proto.RegisterType((*ExistsResponse)(nil), "atomix.map.ExistsResponse")
	proto.RegisterType((*SizeRequest)(nil), "atomix.map.SizeRequest")
	proto.RegisterType((*SizeResponse)(nil), "atomix.map.SizeResponse")
	proto.RegisterType((*PutRequest)(nil), "atomix.map.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "atomix.map.PutResponse")
	proto.RegisterType((*ReplaceRequest)(nil), "atomix.map.ReplaceRequest")
	proto.RegisterType((*ReplaceResponse)(nil), "atomix.map.ReplaceResponse")
	proto.RegisterType((*GetRequest)(nil), "atomix.map.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "atomix.map.GetResponse")
	proto.RegisterType((*RemoveRequest)(nil), "atomix.map.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "atomix.map.RemoveResponse")
	proto.RegisterType((*ClearRequest)(nil), "atomix.map.ClearRequest")
	proto.RegisterType((*ClearResponse)(nil), "atomix.map.ClearResponse")
	proto.RegisterType((*EventRequest)(nil), "atomix.map.EventRequest")
	proto.RegisterType((*EventResponse)(nil), "atomix.map.EventResponse")
}

func init() { proto.RegisterFile("map.proto", fileDescriptor_670a3ee274ba020a) }

var fileDescriptor_670a3ee274ba020a = []byte{
	// 1115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xdb, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x0f, 0x92, 0xec, 0xd1, 0xc1, 0xca, 0xfe, 0x3f, 0x62, 0x9a, 0x6e, 0x1d, 0x87, 0x85,
	0x5b, 0xb7, 0x17, 0x4c, 0xe1, 0xdc, 0x04, 0x08, 0x7a, 0x70, 0x2c, 0x35, 0x51, 0x7c, 0x90, 0x42,
	0xbb, 0xe9, 0xa5, 0x41, 0x9b, 0x6b, 0x95, 0x30, 0xc9, 0x65, 0xc9, 0xa5, 0x12, 0xe5, 0xa6, 0xbd,
	0x29, 0xfa, 0x44, 0x7d, 0x82, 0xf6, 0x15, 0x0a, 0xb4, 0xe8, 0x13, 0xf4, 0x2d, 0x8a, 0xdd, 0x25,
	0x25, 0x52, 0x92, 0x81, 0x18, 0x15, 0x54, 0x34, 0x77, 0xdc, 0x9d, 0xd9, 0xf9, 0x66, 0xbe, 0xd9,
	0x99, 0x1d, 0xc2, 0xaa, 0x6f, 0x87, 0x66, 0x18, 0x11, 0x4a, 0x10, 0xd8, 0x94, 0xf8, 0xee, 0x6b,
	0xd3, 0xb7, 0x43, 0xbd, 0xc9, 0xb7, 0x2e, 0x89, 0x27, 0x64, 0x7a, 0xe3, 0x5b, 0x6c, 0x3b, 0x38,
	0x8a, 0xd3, 0xe5, 0xd6, 0x80, 0x90, 0x81, 0x87, 0x1f, 0xf0, 0xd5, 0x45, 0x72, 0xf5, 0xc0, 0x49,
	0x22, 0x9b, 0xba, 0x24, 0x10, 0x72, 0xe3, 0x2f, 0x09, 0xca, 0xc7, 0x76, 0xd8, 0x75, 0x10, 0x02,
	0x35, 0xb0, 0x7d, 0xac, 0x49, 0xdb, 0xd2, 0xee, 0xaa, 0xc5, 0xbf, 0xd1, 0x23, 0x50, 0x23, 0xfb,
	0x8a, 0x6a, 0xf2, 0xb6, 0xb4, 0x5b, 0xdb, 0x33, 0xcc, 0x14, 0x77, 0x0c, 0x79, 0x9c, 0x78, 0xd4,
	0xb5, 0xec, 0x2b, 0xda, 0x4f, 0x77, 0x9e, 0x95, 0x2c, 0x7e, 0x02, 0x1d, 0x41, 0xc3, 0x67, 0xc2,
	0xf3, 0x30, 0x72, 0x7d, 0x3b, 0x1a, 0x69, 0x0a, 0x37, 0xb1, 0x33, 0xdf, 0x44, 0x5f, 0x28, 0xe5,
	0xac, 0xd4, 0xfd, 0xdc, 0x3e, 0x7a, 0x0c, 0x8a, 0x47, 0x06, 0x9a, 0xca, 0x6d, 0x7c, 0x34, 0x63,
	0xa3, 0xed, 0xc6, 0x34, 0x72, 0x2f, 0x12, 0x8a, 0x9d, 0x23, 0x32, 0xc8, 0x59, 0x61, 0xa7, 0x9e,
	0x54, 0xa1, 0x2c, 0x62, 0x1d, 0x40, 0xe3, 0x20, 0xc2, 0x36, 0xc5, 0x16, 0xfe, 0x2e, 0xc1, 0x31,
	0x45, 0xf7, 0x41, 0x76, 0x1d, 0x1e, 0x70, 0x6d, 0xef, 0x8e, 0x39, 0x21, 0xd5, 0xe4, 0x8c, 0x58,
	0xb2, 0xeb, 0xa0, 0x87, 0x50, 0xa5, 0xae, 0x8f, 0x49, 0x92, 0x91, 0xb0, 0x61, 0x0a, 0x46, 0xcd,
	0x8c, 0x51, 0xb3, 0x9d, 0x32, 0x6a, 0x65, 0x9a, 0xc6, 0x73, 0x68, 0x66, 0x40, 0x71, 0x48, 0x82,
	0x98, 0x11, 0x59, 0x4d, 0xf3, 0x92, 0xc2, 0x6d, 0x65, 0x70, 0x59, 0xba, 0x4e, 0x71, 0x1c, 0xbb,
	0x24, 0x78, 0x26, 0x96, 0x56, 0xa6, 0x6e, 0x10, 0x68, 0x1d, 0x62, 0x1c, 0xee, 0x7b, 0xee, 0xf0,
	0x36, 0x7e, 0xe7, 0x00, 0xe5, 0xdb, 0x01, 0x1e, 0xc3, 0x9d, 0x1c, 0xe0, 0x3f, 0xf6, 0xff, 0x1a,
	0xea, 0x07, 0x1e, 0x89, 0x97, 0xe3, 0xfb, 0x1a, 0x34, 0x52, 0x30, 0xe1, 0xb7, 0xf1, 0xa3, 0x04,
	0x8d, 0xce, 0x6b, 0x37, 0xa6, 0xf1, 0x2d, 0xf0, 0x3f, 0x9b, 0xc6, 0xff, 0xe0, 0x06, 0xfc, 0x17,
	0x09, 0x8e, 0x46, 0xd3, 0x4e, 0xb0, 0x42, 0xba, 0xc6, 0xa3, 0x58, 0x53, 0xb6, 0x15, 0x56, 0x48,
	0xec, 0xdb, 0x48, 0xa0, 0x99, 0xb9, 0x91, 0x32, 0xfa, 0xe5, 0x34, 0xa3, 0x1f, 0xde, 0x00, 0x92,
	0x9d, 0x98, 0xc1, 0xb9, 0x0f, 0xf5, 0x4b, 0x12, 0x50, 0xdb, 0x0d, 0xe2, 0xf3, 0x6b, 0x3c, 0xe2,
	0xbe, 0xae, 0x58, 0xb5, 0x6c, 0xef, 0x10, 0x8f, 0x0c, 0x02, 0xb5, 0x53, 0xf7, 0x0d, 0x5e, 0x5a,
	0xec, 0x86, 0x03, 0x75, 0x01, 0xb8, 0xb0, 0x28, 0x11, 0xa8, 0xb1, 0xfb, 0x06, 0x73, 0x6f, 0xca,
	0x16, 0xff, 0x36, 0x7e, 0x95, 0x00, 0xfa, 0x09, 0xbd, 0x45, 0x58, 0x5f, 0x4c, 0x87, 0xb5, 0x73,
	0x83, 0x1f, 0x07, 0xc4, 0xf7, 0xed, 0xc0, 0x99, 0x71, 0xa3, 0x05, 0x0a, 0xe3, 0x58, 0xe1, 0xcd,
	0x91, 0x7d, 0xa2, 0xff, 0x43, 0x79, 0x68, 0x7b, 0x09, 0xe6, 0x5d, 0xa9, 0x6e, 0x89, 0x05, 0xd2,
	0xa0, 0x3a, 0xc4, 0x11, 0xb3, 0xa4, 0x95, 0xb7, 0xa5, 0x5d, 0xc5, 0xca, 0x96, 0xcc, 0x02, 0xa5,
	0x9e, 0x56, 0xe1, 0xbb, 0xec, 0xd3, 0xf8, 0x4d, 0x82, 0x1a, 0x0f, 0x63, 0x61, 0x64, 0xed, 0x41,
	0x25, 0xa6, 0x36, 0x4d, 0x44, 0x94, 0xcd, 0x3d, 0x3d, 0xcf, 0x46, 0x76, 0xea, 0x94, 0x6b, 0x58,
	0xa9, 0x26, 0xda, 0x81, 0x66, 0x18, 0xe1, 0xa1, 0x4b, 0x92, 0xf8, 0x5c, 0x04, 0xa4, 0xf0, 0x80,
	0x1a, 0xd9, 0xee, 0x4b, 0x1e, 0xd8, 0xc7, 0xd0, 0x9a, 0xa8, 0xa5, 0x11, 0xaa, 0x3c, 0x96, 0xb5,
	0xb1, 0xa2, 0xd8, 0x36, 0x7e, 0x92, 0xa1, 0x69, 0xe1, 0xd0, 0xb3, 0x2f, 0xf1, 0xbf, 0x9b, 0xa2,
	0xd9, 0xd0, 0xd4, 0xb7, 0x0d, 0xad, 0x3c, 0x37, 0x34, 0xb4, 0x09, 0xab, 0x01, 0x7e, 0x95, 0x1a,
	0xab, 0x70, 0x63, 0x2b, 0x01, 0x7e, 0x25, 0xec, 0xa4, 0x19, 0xae, 0x4e, 0x32, 0xfc, 0x87, 0x04,
	0x6b, 0x63, 0x26, 0xde, 0xb1, 0x2c, 0xff, 0x20, 0x01, 0x3c, 0xc5, 0x74, 0x79, 0x7d, 0x75, 0x26,
	0xbf, 0xc6, 0xf7, 0x50, 0xe3, 0x1e, 0x2c, 0x8c, 0xd9, 0x71, 0x4d, 0xcb, 0x37, 0xd4, 0xb4, 0x52,
	0xa8, 0x69, 0xe3, 0x67, 0x09, 0x1a, 0x16, 0xf6, 0xc9, 0x10, 0xff, 0xa7, 0x7a, 0x91, 0xf1, 0xbb,
	0xc4, 0x2a, 0x54, 0xf8, 0xfd, 0x8e, 0x5d, 0xcb, 0x88, 0xcd, 0x1b, 0xd8, 0x8e, 0x96, 0x98, 0x10,
	0xe3, 0x05, 0x1b, 0x3b, 0x38, 0xe6, 0xa2, 0xc8, 0x64, 0x61, 0x74, 0x86, 0x38, 0x58, 0xe6, 0x1b,
	0x67, 0xfc, 0x22, 0x43, 0x23, 0x05, 0x5d, 0xe0, 0xa5, 0x50, 0xe9, 0x28, 0xc4, 0xe9, 0x95, 0xd8,
	0xca, 0x7b, 0x5e, 0x80, 0x32, 0xcf, 0x46, 0x21, 0xb6, 0xb8, 0xee, 0x9c, 0xfb, 0xbd, 0x09, 0xab,
	0xc4, 0x73, 0x0a, 0x3d, 0x7c, 0x85, 0x78, 0x8e, 0xb8, 0x1c, 0xf7, 0xa0, 0xc6, 0x85, 0x85, 0xab,
	0x0e, 0x4c, 0xfc, 0x36, 0x4d, 0xfb, 0x1e, 0xd4, 0xb8, 0x30, 0x3d, 0x2d, 0x9a, 0x37, 0x30, 0x71,
	0x7a, 0xa1, 0x4c, 0x50, 0x99, 0x6f, 0xa8, 0x0e, 0x2b, 0xdd, 0x93, 0xd3, 0x8e, 0x75, 0xd6, 0x69,
	0xb7, 0x4a, 0xa8, 0x06, 0xd5, 0xaf, 0xfb, 0xed, 0x7d, 0xb6, 0x90, 0xd8, 0xc2, 0xea, 0x1c, 0xf7,
	0x5e, 0x76, 0xda, 0x2d, 0xf9, 0x93, 0x43, 0x56, 0x5a, 0xf9, 0xcb, 0x8e, 0x2a, 0x20, 0xf7, 0x0e,
	0x5b, 0x25, 0xb4, 0x02, 0xea, 0x49, 0xaf, 0xd7, 0x6f, 0x49, 0xa8, 0x09, 0xf0, 0x8d, 0xd5, 0x3d,
	0xeb, 0x9c, 0x1f, 0xf5, 0x0e, 0x0e, 0x5b, 0x32, 0x5a, 0x87, 0xff, 0xf5, 0xad, 0xce, 0x41, 0xef,
	0xa4, 0xdd, 0x3d, 0xeb, 0xf6, 0x4e, 0xce, 0xbf, 0xda, 0xef, 0x1e, 0x75, 0xda, 0x2d, 0x65, 0xef,
	0xcf, 0x32, 0xc0, 0xb1, 0x1d, 0x9e, 0xe2, 0x68, 0xe8, 0x5e, 0x62, 0xb4, 0x0f, 0x15, 0xf1, 0x63,
	0x81, 0x36, 0xf2, 0x4c, 0x16, 0xfe, 0x6a, 0x74, 0x7d, 0x9e, 0x28, 0x9d, 0x87, 0x4b, 0xe8, 0x39,
	0xac, 0x8e, 0xc7, 0x7b, 0xf4, 0x5e, 0x5e, 0x75, 0xfa, 0x37, 0x43, 0x7f, 0xff, 0x06, 0xe9, 0xd8,
	0xd6, 0xe7, 0x50, 0xe6, 0xe3, 0x36, 0xd2, 0x0a, 0x90, 0xb9, 0x71, 0x5f, 0xdf, 0x98, 0x23, 0x19,
	0x9f, 0x7f, 0x0c, 0x2a, 0x9b, 0x16, 0xd1, 0x7a, 0x5e, 0x29, 0x37, 0xb0, 0xea, 0xda, 0xac, 0x60,
	0x7c, 0x78, 0x1f, 0x2a, 0x62, 0xa4, 0x2e, 0x72, 0x51, 0x98, 0xf6, 0x8b, 0x5c, 0x14, 0x27, 0x70,
	0xa3, 0x84, 0x1e, 0x81, 0xd2, 0x4f, 0x28, 0xba, 0x9b, 0x57, 0x9a, 0xcc, 0x95, 0xfa, 0xfa, 0xcc,
	0xfe, 0xf8, 0x64, 0x1b, 0xaa, 0xe9, 0xbb, 0x8e, 0xa6, 0xda, 0x5c, 0x7e, 0xec, 0xd1, 0x37, 0xe7,
	0xca, 0xf2, 0xf8, 0x4f, 0xf1, 0x14, 0xfe, 0xe4, 0x49, 0x2d, 0xe2, 0xe7, 0x1e, 0x3a, 0x11, 0xbc,
	0xe8, 0xdf, 0xc5, 0xe0, 0x0b, 0x6f, 0x91, 0xae, 0xcf, 0x13, 0x15, 0x93, 0x87, 0xed, 0x68, 0x3a,
	0x79, 0x93, 0xde, 0x39, 0x9d, 0xbc, 0x5c, 0x87, 0x4b, 0xf9, 0x67, 0x15, 0x1c, 0x17, 0x0d, 0xe4,
	0xbb, 0x56, 0xd1, 0x40, 0xa1, 0xde, 0x8d, 0xd2, 0xa7, 0xd2, 0x93, 0xbb, 0x80, 0x5c, 0x92, 0xa9,
	0x0c, 0xa2, 0xf0, 0x92, 0xe9, 0xf5, 0xa5, 0x8b, 0x0a, 0xff, 0xb7, 0x7e, 0xf8, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa6, 0x6f, 0xfc, 0xfb, 0xf3, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MapServiceClient is the client API for MapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error)
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	Events(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (MapService_EventsClient, error)
}

type mapServiceClient struct {
	cc *grpc.ClientConn
}

func NewMapServiceClient(cc *grpc.ClientConn) MapServiceClient {
	return &mapServiceClient{cc}
}

func (c *mapServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error) {
	out := new(SizeResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Size", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/atomix.map.MapService/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) Events(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (MapService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MapService_serviceDesc.Streams[0], "/atomix.map.MapService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapServiceEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapService_EventsClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type mapServiceEventsClient struct {
	grpc.ClientStream
}

func (x *mapServiceEventsClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MapServiceServer is the server API for MapService service.
type MapServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	Size(context.Context, *SizeRequest) (*SizeResponse, error)
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	Events(*EventRequest, MapService_EventsServer) error
}

// UnimplementedMapServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMapServiceServer struct {
}

func (*UnimplementedMapServiceServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedMapServiceServer) KeepAlive(ctx context.Context, req *KeepAliveRequest) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (*UnimplementedMapServiceServer) Close(ctx context.Context, req *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedMapServiceServer) Size(ctx context.Context, req *SizeRequest) (*SizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Size not implemented")
}
func (*UnimplementedMapServiceServer) Exists(ctx context.Context, req *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (*UnimplementedMapServiceServer) Put(ctx context.Context, req *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedMapServiceServer) Replace(ctx context.Context, req *ReplaceRequest) (*ReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (*UnimplementedMapServiceServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedMapServiceServer) Remove(ctx context.Context, req *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedMapServiceServer) Clear(ctx context.Context, req *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (*UnimplementedMapServiceServer) Events(req *EventRequest, srv MapService_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}

func RegisterMapServiceServer(s *grpc.Server, srv MapServiceServer) {
	s.RegisterService(&_MapService_serviceDesc, srv)
}

func _MapService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Size",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Size(ctx, req.(*SizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.map.MapService/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapServiceServer).Events(m, &mapServiceEventsServer{stream})
}

type MapService_EventsServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type mapServiceEventsServer struct {
	grpc.ServerStream
}

func (x *mapServiceEventsServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.map.MapService",
	HandlerType: (*MapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MapService_Create_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _MapService_KeepAlive_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _MapService_Close_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _MapService_Size_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _MapService_Exists_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _MapService_Put_Handler,
		},
		{
			MethodName: "Replace",
			Handler:    _MapService_Replace_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MapService_Get_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _MapService_Remove_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _MapService_Clear_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _MapService_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "map.proto",
}
