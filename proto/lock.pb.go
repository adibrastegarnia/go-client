// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lock.proto

package atomix_lock

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Lock ID
type LockId struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Proto:
	//	*LockId_Raft
	//	*LockId_MultiPrimary
	//	*LockId_Log
	Proto                isLockId_Proto `protobuf_oneof:"proto"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *LockId) Reset()         { *m = LockId{} }
func (m *LockId) String() string { return proto.CompactTextString(m) }
func (*LockId) ProtoMessage()    {}
func (*LockId) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{0}
}

func (m *LockId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockId.Unmarshal(m, b)
}
func (m *LockId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockId.Marshal(b, m, deterministic)
}
func (m *LockId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockId.Merge(m, src)
}
func (m *LockId) XXX_Size() int {
	return xxx_messageInfo_LockId.Size(m)
}
func (m *LockId) XXX_DiscardUnknown() {
	xxx_messageInfo_LockId.DiscardUnknown(m)
}

var xxx_messageInfo_LockId proto.InternalMessageInfo

func (m *LockId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isLockId_Proto interface {
	isLockId_Proto()
}

type LockId_Raft struct {
	Raft *MultiRaftProtocol `protobuf:"bytes,2,opt,name=raft,proto3,oneof"`
}

type LockId_MultiPrimary struct {
	MultiPrimary *MultiPrimaryProtocol `protobuf:"bytes,3,opt,name=multi_primary,json=multiPrimary,proto3,oneof"`
}

type LockId_Log struct {
	Log *DistributedLogProtocol `protobuf:"bytes,4,opt,name=log,proto3,oneof"`
}

func (*LockId_Raft) isLockId_Proto() {}

func (*LockId_MultiPrimary) isLockId_Proto() {}

func (*LockId_Log) isLockId_Proto() {}

func (m *LockId) GetProto() isLockId_Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *LockId) GetRaft() *MultiRaftProtocol {
	if x, ok := m.GetProto().(*LockId_Raft); ok {
		return x.Raft
	}
	return nil
}

func (m *LockId) GetMultiPrimary() *MultiPrimaryProtocol {
	if x, ok := m.GetProto().(*LockId_MultiPrimary); ok {
		return x.MultiPrimary
	}
	return nil
}

func (m *LockId) GetLog() *DistributedLogProtocol {
	if x, ok := m.GetProto().(*LockId_Log); ok {
		return x.Log
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LockId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LockId_Raft)(nil),
		(*LockId_MultiPrimary)(nil),
		(*LockId_Log)(nil),
	}
}

type CreateRequest struct {
	Id                   *LockId            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout              *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{1}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetId() *LockId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CreateRequest) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

type CreateResponse struct {
	Headers              *SessionHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{2}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type KeepAliveRequest struct {
	Id                   *LockId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KeepAliveRequest) Reset()         { *m = KeepAliveRequest{} }
func (m *KeepAliveRequest) String() string { return proto.CompactTextString(m) }
func (*KeepAliveRequest) ProtoMessage()    {}
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{3}
}

func (m *KeepAliveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveRequest.Unmarshal(m, b)
}
func (m *KeepAliveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveRequest.Marshal(b, m, deterministic)
}
func (m *KeepAliveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveRequest.Merge(m, src)
}
func (m *KeepAliveRequest) XXX_Size() int {
	return xxx_messageInfo_KeepAliveRequest.Size(m)
}
func (m *KeepAliveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveRequest proto.InternalMessageInfo

func (m *KeepAliveRequest) GetId() *LockId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *KeepAliveRequest) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type KeepAliveResponse struct {
	Headers              *SessionHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *KeepAliveResponse) Reset()         { *m = KeepAliveResponse{} }
func (m *KeepAliveResponse) String() string { return proto.CompactTextString(m) }
func (*KeepAliveResponse) ProtoMessage()    {}
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{4}
}

func (m *KeepAliveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAliveResponse.Unmarshal(m, b)
}
func (m *KeepAliveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAliveResponse.Marshal(b, m, deterministic)
}
func (m *KeepAliveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAliveResponse.Merge(m, src)
}
func (m *KeepAliveResponse) XXX_Size() int {
	return xxx_messageInfo_KeepAliveResponse.Size(m)
}
func (m *KeepAliveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAliveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAliveResponse proto.InternalMessageInfo

func (m *KeepAliveResponse) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type CloseRequest struct {
	Id                   *LockId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CloseRequest) Reset()         { *m = CloseRequest{} }
func (m *CloseRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()    {}
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{5}
}

func (m *CloseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRequest.Unmarshal(m, b)
}
func (m *CloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRequest.Marshal(b, m, deterministic)
}
func (m *CloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRequest.Merge(m, src)
}
func (m *CloseRequest) XXX_Size() int {
	return xxx_messageInfo_CloseRequest.Size(m)
}
func (m *CloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRequest proto.InternalMessageInfo

func (m *CloseRequest) GetId() *LockId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CloseRequest) GetHeaders() *SessionHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

type CloseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseResponse) Reset()         { *m = CloseResponse{} }
func (m *CloseResponse) String() string { return proto.CompactTextString(m) }
func (*CloseResponse) ProtoMessage()    {}
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{6}
}

func (m *CloseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseResponse.Unmarshal(m, b)
}
func (m *CloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseResponse.Marshal(b, m, deterministic)
}
func (m *CloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseResponse.Merge(m, src)
}
func (m *CloseResponse) XXX_Size() int {
	return xxx_messageInfo_CloseResponse.Size(m)
}
func (m *CloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseResponse proto.InternalMessageInfo

type LockRequest struct {
	Id                   *LockId                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Timeout              *duration.Duration     `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *LockRequest) Reset()         { *m = LockRequest{} }
func (m *LockRequest) String() string { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()    {}
func (*LockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{7}
}

func (m *LockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockRequest.Unmarshal(m, b)
}
func (m *LockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockRequest.Marshal(b, m, deterministic)
}
func (m *LockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockRequest.Merge(m, src)
}
func (m *LockRequest) XXX_Size() int {
	return xxx_messageInfo_LockRequest.Size(m)
}
func (m *LockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockRequest proto.InternalMessageInfo

func (m *LockRequest) GetId() *LockId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *LockRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *LockRequest) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

type LockResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Version              uint64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LockResponse) Reset()         { *m = LockResponse{} }
func (m *LockResponse) String() string { return proto.CompactTextString(m) }
func (*LockResponse) ProtoMessage()    {}
func (*LockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{8}
}

func (m *LockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockResponse.Unmarshal(m, b)
}
func (m *LockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockResponse.Marshal(b, m, deterministic)
}
func (m *LockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockResponse.Merge(m, src)
}
func (m *LockResponse) XXX_Size() int {
	return xxx_messageInfo_LockResponse.Size(m)
}
func (m *LockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockResponse proto.InternalMessageInfo

func (m *LockResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *LockResponse) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type UnlockRequest struct {
	Id                   *LockId                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionCommandHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Version              uint64                 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UnlockRequest) Reset()         { *m = UnlockRequest{} }
func (m *UnlockRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockRequest) ProtoMessage()    {}
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{9}
}

func (m *UnlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockRequest.Unmarshal(m, b)
}
func (m *UnlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockRequest.Marshal(b, m, deterministic)
}
func (m *UnlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockRequest.Merge(m, src)
}
func (m *UnlockRequest) XXX_Size() int {
	return xxx_messageInfo_UnlockRequest.Size(m)
}
func (m *UnlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockRequest proto.InternalMessageInfo

func (m *UnlockRequest) GetId() *LockId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *UnlockRequest) GetHeaders() *SessionCommandHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *UnlockRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type UnlockResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	Unlocked             bool                    `protobuf:"varint,2,opt,name=unlocked,proto3" json:"unlocked,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UnlockResponse) Reset()         { *m = UnlockResponse{} }
func (m *UnlockResponse) String() string { return proto.CompactTextString(m) }
func (*UnlockResponse) ProtoMessage()    {}
func (*UnlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{10}
}

func (m *UnlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockResponse.Unmarshal(m, b)
}
func (m *UnlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockResponse.Marshal(b, m, deterministic)
}
func (m *UnlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockResponse.Merge(m, src)
}
func (m *UnlockResponse) XXX_Size() int {
	return xxx_messageInfo_UnlockResponse.Size(m)
}
func (m *UnlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockResponse proto.InternalMessageInfo

func (m *UnlockResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *UnlockResponse) GetUnlocked() bool {
	if m != nil {
		return m.Unlocked
	}
	return false
}

type IsLockedRequest struct {
	Id                   *LockId              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Headers              *SessionQueryHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Version              uint64               `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IsLockedRequest) Reset()         { *m = IsLockedRequest{} }
func (m *IsLockedRequest) String() string { return proto.CompactTextString(m) }
func (*IsLockedRequest) ProtoMessage()    {}
func (*IsLockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{11}
}

func (m *IsLockedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsLockedRequest.Unmarshal(m, b)
}
func (m *IsLockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsLockedRequest.Marshal(b, m, deterministic)
}
func (m *IsLockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsLockedRequest.Merge(m, src)
}
func (m *IsLockedRequest) XXX_Size() int {
	return xxx_messageInfo_IsLockedRequest.Size(m)
}
func (m *IsLockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsLockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsLockedRequest proto.InternalMessageInfo

func (m *IsLockedRequest) GetId() *LockId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IsLockedRequest) GetHeaders() *SessionQueryHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *IsLockedRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type IsLockedResponse struct {
	Headers              *SessionResponseHeaders `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	IsLocked             bool                    `protobuf:"varint,2,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IsLockedResponse) Reset()         { *m = IsLockedResponse{} }
func (m *IsLockedResponse) String() string { return proto.CompactTextString(m) }
func (*IsLockedResponse) ProtoMessage()    {}
func (*IsLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_164ad2988c7acaf1, []int{12}
}

func (m *IsLockedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsLockedResponse.Unmarshal(m, b)
}
func (m *IsLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsLockedResponse.Marshal(b, m, deterministic)
}
func (m *IsLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsLockedResponse.Merge(m, src)
}
func (m *IsLockedResponse) XXX_Size() int {
	return xxx_messageInfo_IsLockedResponse.Size(m)
}
func (m *IsLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsLockedResponse proto.InternalMessageInfo

func (m *IsLockedResponse) GetHeaders() *SessionResponseHeaders {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *IsLockedResponse) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func init() {
	proto.RegisterType((*LockId)(nil), "atomix.lock.LockId")
	proto.RegisterType((*CreateRequest)(nil), "atomix.lock.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "atomix.lock.CreateResponse")
	proto.RegisterType((*KeepAliveRequest)(nil), "atomix.lock.KeepAliveRequest")
	proto.RegisterType((*KeepAliveResponse)(nil), "atomix.lock.KeepAliveResponse")
	proto.RegisterType((*CloseRequest)(nil), "atomix.lock.CloseRequest")
	proto.RegisterType((*CloseResponse)(nil), "atomix.lock.CloseResponse")
	proto.RegisterType((*LockRequest)(nil), "atomix.lock.LockRequest")
	proto.RegisterType((*LockResponse)(nil), "atomix.lock.LockResponse")
	proto.RegisterType((*UnlockRequest)(nil), "atomix.lock.UnlockRequest")
	proto.RegisterType((*UnlockResponse)(nil), "atomix.lock.UnlockResponse")
	proto.RegisterType((*IsLockedRequest)(nil), "atomix.lock.IsLockedRequest")
	proto.RegisterType((*IsLockedResponse)(nil), "atomix.lock.IsLockedResponse")
}

func init() { proto.RegisterFile("lock.proto", fileDescriptor_164ad2988c7acaf1) }

var fileDescriptor_164ad2988c7acaf1 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x4e, 0xdb, 0x40,
	0x10, 0xc5, 0x49, 0x48, 0x60, 0x42, 0x02, 0x5d, 0x0e, 0x75, 0xdc, 0x12, 0x21, 0x23, 0x5a, 0x4e,
	0x46, 0x0a, 0x97, 0x4a, 0x15, 0x2a, 0x25, 0x1c, 0x48, 0x1b, 0xa4, 0xd4, 0xa8, 0xe7, 0xca, 0x89,
	0x37, 0xe9, 0x16, 0xdb, 0x6b, 0xd6, 0xeb, 0xa8, 0x7c, 0x45, 0x7f, 0xa3, 0xd7, 0xfe, 0x56, 0xbf,
	0xa2, 0xf2, 0xae, 0xd7, 0xb5, 0x9d, 0x44, 0x6a, 0x54, 0xc4, 0x29, 0x19, 0xcf, 0xec, 0x7b, 0x6f,
	0xde, 0xce, 0x0e, 0x80, 0x47, 0x27, 0x77, 0x56, 0xc8, 0x28, 0xa7, 0xa8, 0xe9, 0x70, 0xea, 0x93,
	0xef, 0x56, 0xf2, 0xc9, 0xe8, 0xce, 0x28, 0x9d, 0x79, 0xf8, 0x54, 0xa4, 0xc6, 0xf1, 0xf4, 0xd4,
	0x8d, 0x99, 0xc3, 0x09, 0x0d, 0x64, 0xb1, 0xd1, 0x16, 0x3f, 0x13, 0xea, 0xa5, 0x71, 0xeb, 0x2b,
	0x76, 0x5c, 0xcc, 0x22, 0x19, 0x9a, 0xbf, 0x35, 0xa8, 0x0f, 0xe9, 0xe4, 0x6e, 0xe0, 0x22, 0x04,
	0xb5, 0xc0, 0xf1, 0xb1, 0xae, 0x1d, 0x6a, 0x27, 0xdb, 0xb6, 0xf8, 0x8f, 0xde, 0x40, 0x8d, 0x39,
	0x53, 0xae, 0x57, 0x0e, 0xb5, 0x93, 0x66, 0xcf, 0xb4, 0x52, 0xe6, 0x0c, 0xf3, 0x26, 0xf6, 0x38,
	0xb1, 0x9d, 0x29, 0x1f, 0xa5, 0x5f, 0xae, 0x37, 0x6c, 0x71, 0x02, 0x0d, 0xa1, 0xe5, 0x27, 0xc9,
	0x2f, 0x21, 0x23, 0xbe, 0xc3, 0x1e, 0xf4, 0xaa, 0x80, 0x38, 0x5e, 0x0e, 0x31, 0x92, 0x45, 0x39,
	0x94, 0x1d, 0x3f, 0xf7, 0x1d, 0xbd, 0x85, 0xaa, 0x47, 0x67, 0x7a, 0x4d, 0x60, 0xbc, 0x5e, 0xc0,
	0xb8, 0x22, 0x11, 0x67, 0x64, 0x1c, 0x73, 0xec, 0x0e, 0xe9, 0x2c, 0x87, 0x92, 0x9c, 0xba, 0x6c,
	0xc0, 0xa6, 0x6c, 0x96, 0x40, 0xab, 0xcf, 0xb0, 0xc3, 0xb1, 0x8d, 0xef, 0x63, 0x1c, 0x71, 0x74,
	0x04, 0x15, 0xe2, 0x8a, 0x86, 0x9b, 0xbd, 0x7d, 0x2b, 0x67, 0xab, 0x25, 0x3d, 0xb1, 0x2b, 0xc4,
	0x45, 0x67, 0xd0, 0xe0, 0xc4, 0xc7, 0x34, 0x56, 0x36, 0x74, 0x2c, 0xe9, 0xb9, 0xa5, 0x3c, 0xb7,
	0xae, 0x52, 0xcf, 0x6d, 0x55, 0x69, 0x7e, 0x80, 0xb6, 0xa2, 0x8a, 0x42, 0x1a, 0x44, 0x89, 0x95,
	0x8d, 0xd4, 0xfa, 0x94, 0xb0, 0xab, 0x08, 0xd5, 0x8d, 0xdc, 0xe2, 0x28, 0x22, 0x34, 0xb8, 0x96,
	0xa1, 0xad, 0xca, 0xcd, 0x7b, 0xd8, 0xfb, 0x88, 0x71, 0xf8, 0xde, 0x23, 0xf3, 0xf5, 0x94, 0xe7,
	0x28, 0x2b, 0xeb, 0x51, 0xde, 0xc0, 0xb3, 0x1c, 0xe5, 0x7f, 0x77, 0xe0, 0xc3, 0x4e, 0xdf, 0xa3,
	0xd1, 0x53, 0xa9, 0xdf, 0x85, 0x56, 0x4a, 0x27, 0x95, 0x9b, 0x3f, 0x35, 0x68, 0x26, 0xc8, 0x6b,
	0xf1, 0xbf, 0x2b, 0xf3, 0x1f, 0xaf, 0xe0, 0xef, 0x53, 0xdf, 0x77, 0x02, 0xb7, 0x2c, 0x23, 0x3f,
	0x38, 0xd5, 0x7f, 0x1e, 0x9c, 0x6f, 0xb0, 0x23, 0x95, 0xa6, 0xa6, 0x5f, 0x94, 0x4d, 0x7f, 0xb5,
	0x42, 0x85, 0x3a, 0xb1, 0x20, 0x43, 0x87, 0xc6, 0x1c, 0xb3, 0xa4, 0x44, 0xf4, 0x51, 0xb3, 0x55,
	0x68, 0xfe, 0xd0, 0xa0, 0xf5, 0x39, 0xf0, 0x9e, 0xdc, 0x98, 0x9c, 0xa2, 0x6a, 0x51, 0x51, 0x00,
	0x6d, 0x25, 0xe8, 0xd1, 0xfa, 0x37, 0x60, 0x2b, 0x16, 0x98, 0xd8, 0x15, 0x7a, 0xb7, 0xec, 0x2c,
	0x4e, 0x1c, 0xd8, 0x1d, 0x44, 0x43, 0x11, 0xac, 0xe5, 0xc1, 0x79, 0xd9, 0x83, 0xa3, 0x15, 0xb2,
	0x3e, 0xc5, 0x98, 0x3d, 0xac, 0xe1, 0x40, 0x08, 0x7b, 0x7f, 0x05, 0x3d, 0xa6, 0x07, 0x24, 0x45,
	0x55, 0x1e, 0xa8, 0xb8, 0xf7, 0xab, 0x2a, 0x1f, 0xc7, 0x2d, 0x66, 0x73, 0x32, 0xc1, 0xa8, 0x0f,
	0x75, 0xb9, 0xba, 0x90, 0x51, 0xe8, 0xbe, 0xb0, 0x3a, 0x8d, 0x17, 0x4b, 0x73, 0xe9, 0x7b, 0xdb,
	0x40, 0x43, 0xd8, 0xce, 0x16, 0x08, 0x3a, 0x28, 0xd4, 0x96, 0x77, 0x99, 0xd1, 0x5d, 0x95, 0xce,
	0xd0, 0x2e, 0x60, 0x53, 0x3c, 0x68, 0xd4, 0x29, 0xb2, 0xe6, 0x76, 0x8a, 0x61, 0x2c, 0x4b, 0x65,
	0x08, 0xe7, 0x50, 0x4b, 0x7a, 0x44, 0xfa, 0xc2, 0x85, 0xaa, 0xf3, 0x9d, 0x25, 0x99, 0xec, 0x78,
	0x1f, 0xea, 0x72, 0x2e, 0x4b, 0x9e, 0x14, 0x5e, 0x4f, 0xc9, 0x93, 0xe2, 0x20, 0x9b, 0x1b, 0x68,
	0x00, 0x5b, 0xea, 0x6a, 0xd1, 0xcb, 0x42, 0x69, 0x69, 0x04, 0x8d, 0x83, 0x15, 0x59, 0x05, 0x75,
	0xf9, 0x1c, 0xf6, 0x09, 0x55, 0x45, 0x33, 0x16, 0x4e, 0x44, 0xe5, 0x48, 0x1b, 0xd7, 0xc5, 0x6a,
	0x39, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x71, 0xa2, 0x3c, 0x30, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LockServiceClient is the client API for LockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LockServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	IsLocked(ctx context.Context, in *IsLockedRequest, opts ...grpc.CallOption) (*IsLockedResponse, error)
}

type lockServiceClient struct {
	cc *grpc.ClientConn
}

func NewLockServiceClient(cc *grpc.ClientConn) LockServiceClient {
	return &lockServiceClient{cc}
}

func (c *lockServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/atomix.lock.LockService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, "/atomix.lock.LockService/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/atomix.lock.LockService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/atomix.lock.LockService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/atomix.lock.LockService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockServiceClient) IsLocked(ctx context.Context, in *IsLockedRequest, opts ...grpc.CallOption) (*IsLockedResponse, error) {
	out := new(IsLockedResponse)
	err := c.cc.Invoke(ctx, "/atomix.lock.LockService/IsLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockServiceServer is the server API for LockService service.
type LockServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	IsLocked(context.Context, *IsLockedRequest) (*IsLockedResponse, error)
}

// UnimplementedLockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLockServiceServer struct {
}

func (*UnimplementedLockServiceServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedLockServiceServer) KeepAlive(ctx context.Context, req *KeepAliveRequest) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (*UnimplementedLockServiceServer) Close(ctx context.Context, req *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedLockServiceServer) Lock(ctx context.Context, req *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedLockServiceServer) Unlock(ctx context.Context, req *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (*UnimplementedLockServiceServer) IsLocked(ctx context.Context, req *IsLockedRequest) (*IsLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLocked not implemented")
}

func RegisterLockServiceServer(s *grpc.Server, srv LockServiceServer) {
	s.RegisterService(&_LockService_serviceDesc, srv)
}

func _LockService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.lock.LockService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.lock.LockService/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.lock.LockService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.lock.LockService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.lock.LockService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockService_IsLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockServiceServer).IsLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.lock.LockService/IsLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockServiceServer).IsLocked(ctx, req.(*IsLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.lock.LockService",
	HandlerType: (*LockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LockService_Create_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _LockService_KeepAlive_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _LockService_Close_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _LockService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _LockService_Unlock_Handler,
		},
		{
			MethodName: "IsLocked",
			Handler:    _LockService_IsLocked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lock.proto",
}
